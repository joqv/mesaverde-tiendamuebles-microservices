spring.application.name=venta-service
server.port=0

# spring.rabbitmq.host=localhost
# spring.rabbitmq.port=5672
# spring.rabbitmq.username=guest
# spring.rabbitmq.password=guest

# app.queue.name=log-queue

# --------------------------------------------
#  CIRCUIT BREAKER 
# --------------------------------------------

# Habilita el registro del estado del CircuitBreaker en el Health Indicator de Spring Actuator
resilience4j.circuitbreaker.instances.procesarVentaRepository.register-health-indicator=true

# Define el tipo de ventana deslizante para calcular metricas (por conteo de llamadas)
resilience4j.circuitbreaker.instances.procesarVentaRepository.sliding-window-type=count-based

# Tamaño de la ventana deslizante (cuantas llamadas se analizan para calcular el porcentaje de fallos)
resilience4j.circuitbreaker.instances.procesarVentaRepository.sliding-window-size=5

# Número minimo de llamadas requeridas antes de que el CircuitBreaker empiece a evaluar el porcentaje de fallos
resilience4j.circuitbreaker.instances.procesarVentaRepository.minimum-number-of-calls=3

# Porcentaje de fallos permitido antes de que el CircuitBreaker se abra (en este caso, 50%)
resilience4j.circuitbreaker.instances.procesarVentaRepository.failure-rate-threshold=50

# Tiempo que el CircuitBreaker permanecera abierto antes de pasar a estado "half-open"
resilience4j.circuitbreaker.instances.procesarVentaRepository.wait-duration-in-open-state=10s

# Número de llamadas permitidas cuando el CircuitBreaker está en estado "half-open"
resilience4j.circuitbreaker.instances.procesarVentaRepository.permitted-number-of-calls-in-half-open-state=2


# --------------------------------------------
#  RETRY (reintentos)
# --------------------------------------------

# Número maximo de intentos totales
resilience4j.retry.instances.procesarVentaRepository.max-attempts=3

# Tiempo de espera entre cada intento de reintento
resilience4j.retry.instances.procesarVentaRepository.wait-duration=1s
